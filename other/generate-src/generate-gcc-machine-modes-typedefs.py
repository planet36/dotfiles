# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

"""
Usage:
python3 generate-gcc-machine-modes-typedefs.py > gcc-machine-modes-typedefs.hpp
"""

import datetime as dt
import os.path
import platform
import subprocess

now = dt.datetime.now(dt.timezone.utc)
author = 'Steven Ward'
this_license = 'OSL-3.0'
brief_description = 'typedefs for GCC machine modes'
generated_by_file_name = os.path.basename(__file__)
generated_datetime = now.isoformat(timespec='seconds')
system_info = platform.platform()

print(fr'''// SPDX-FileCopyrightText: {author}
// SPDX-License-Identifier: {this_license}

/// {brief_description}
/**
\file
\author {author}
\sa https://gcc.gnu.org/onlinedocs/gccint/Machine-Modes.html
*/

// Generated by "{generated_by_file_name}" on {generated_datetime}
// system information: {system_info}

#pragma once
''')

class GccMachineMode:

	def __init__(self):
		self.name = None
		self.description= None
		self.type = None
		self.alias = None
		self.unsigned_type = None
		self.unsigned_alias = None
		self._exists = False

	def __init__(self,
		_name,
		_description,
		_type,
		_alias,
		_unsigned_type = None,
		_unsigned_alias = None):

		self.name = _name
		self.description= _description
		self.type = _type
		self.alias = _alias
		self.unsigned_type = _unsigned_type
		self.unsigned_alias = _unsigned_alias
		self._exists = False
		self.determine_exists()

	def determine_exists(self):
		# gcc -c -x c++ -o /dev/null -
		command = ['gcc', '-c', '-x', 'c++', '-o', '/dev/null', '-']
		#test_program = f'int main() {{typedef {self.type} alias [[gnu::mode({self.name})]]; return 0;}}'.encode()
		test_program = f'int main() {{using alias = {self.type} [[gnu::mode({self.name})]]; return 0;}}'.encode()

		try:
			completed_process = subprocess.run(command, input=test_program, stderr=subprocess.DEVNULL, check=True)
			self._exists = True

		except subprocess.CalledProcessError as err:
			self._exists = False

	def exists(self):
		return self._exists

	def print_c_decl_str(self):
		print(f"#ifdef HAVE_{self.name}_MODE")
		print(f"// {self.description} ({self.name})")
		#print(f"typedef {self.type} {self.alias} [[gnu::mode({self.name})]];")
		print(f"using {self.alias} = {self.type} [[gnu::mode({self.name})]];")
		if (self.unsigned_type is not None) and self.unsigned_alias is not None:
			#print(f"typedef {self.unsigned_type} {self.unsigned_alias} [[gnu::mode({self.name})]];")
			print(f"using {self.unsigned_alias} = {self.unsigned_type} [[gnu::mode({self.name})]];")
		#print("#else")
		#print("// not available")
		print("#endif")

# Machine Modes - GNU Compiler Collection (GCC) Internals
# https://gcc.gnu.org/onlinedocs/gccint/Machine-Modes.html
# Copy all the modes from the page above.
# Ignore these: CC, BLK, VOID
modes = (
GccMachineMode('BI'  , 'bit'                           , 'int'            , 'bit'          , None                , None            ) ,
GccMachineMode('QI'  , 'quarter integer'               , 'int'            , 'int8'         , 'unsigned'          , 'uint8'         ) ,
GccMachineMode('HI'  , 'half integer'                  , 'int'            , 'int16'        , 'unsigned'          , 'uint16'        ) ,
GccMachineMode('PSI' , 'single partial integer'        , 'int'            , 'pint32'       , 'unsigned'          , 'puint32'       ) ,
GccMachineMode('SI'  , 'single integer'                , 'int'            , 'int32'        , 'unsigned'          , 'uint32'        ) ,
GccMachineMode('PDI' , 'double partial integer'        , 'int'            , 'pint64'       , 'unsigned'          , 'puint64'       ) ,
GccMachineMode('DI'  , 'double integer'                , 'int'            , 'int64'        , 'unsigned'          , 'uint64'        ) ,
GccMachineMode('TI'  , 'tetra integer'                 , 'int'            , 'int128'       , 'unsigned'          , 'uint128'       ) ,
GccMachineMode('OI'  , 'octa integer'                  , 'int'            , 'int256'       , 'unsigned'          , 'uint256'       ) ,
GccMachineMode('XI'  , 'hexadeca integer'              , 'int'            , 'int512'       , 'unsigned'          , 'uint512'       ) ,
GccMachineMode('QF'  , 'quarter binary float'          , 'float'          , 'bin8'         , None                , None            ) ,
GccMachineMode('HF'  , 'half binary float'             , 'float'          , 'bin16'        , None                , None            ) ,
GccMachineMode('TQF' , 'three-quarter binary float'    , 'float'          , 'bin24'        , None                , None            ) ,
GccMachineMode('SF'  , 'single binary float'           , 'float'          , 'bin32'        , None                , None            ) ,
GccMachineMode('DF'  , 'double binary float'           , 'float'          , 'bin64'        , None                , None            ) ,
GccMachineMode('XF'  , 'extended binary float'         , 'float'          , 'bin80'        , None                , None            ) ,
GccMachineMode('TF'  , 'tetra binary float'            , 'float'          , 'bin128'       , None                , None            ) ,
GccMachineMode('SD'  , 'single decimal float'          , 'float'          , 'dec32'        , None                , None            ) ,
GccMachineMode('DD'  , 'double decimal float'          , 'float'          , 'dec64'        , None                , None            ) ,
GccMachineMode('TD'  , 'tetra decimal float'           , 'float'          , 'dec128'       , None                , None            ) ,
GccMachineMode('QQ'  , 'quarter signed fractional'     , 'int'            , 'frac8'        , None                , None            ) ,
GccMachineMode('HQ'  , 'half signed fractional'        , 'int'            , 'frac16'       , None                , None            ) ,
GccMachineMode('SQ'  , 'single signed fractional'      , 'int'            , 'frac32'       , None                , None            ) ,
GccMachineMode('DQ'  , 'double signed fractional'      , 'int'            , 'frac64'       , None                , None            ) ,
GccMachineMode('TQ'  , 'tetra signed fractional'       , 'int'            , 'frac128'      , None                , None            ) ,
GccMachineMode('UQQ' , 'quarter unsigned fractional'   , 'unsigned'       , 'ufrac8'       , None                , None            ) ,
GccMachineMode('UHQ' , 'half unsigned fractional'      , 'unsigned'       , 'ufrac16'      , None                , None            ) ,
GccMachineMode('USQ' , 'single unsigned fractional'    , 'unsigned'       , 'ufrac32'      , None                , None            ) ,
GccMachineMode('UDQ' , 'double unsigned fractional'    , 'unsigned'       , 'ufrac64'      , None                , None            ) ,
GccMachineMode('UTQ' , 'tetra unsigned fractional'     , 'unsigned'       , 'ufrac128'     , None                , None            ) ,
GccMachineMode('HA'  , 'half signed accumulator'       , 'int'            , 'accum16'      , None                , None            ) ,
GccMachineMode('SA'  , 'single signed accumulator'     , 'int'            , 'accum32'      , None                , None            ) ,
GccMachineMode('DA'  , 'double signed accumulator'     , 'int'            , 'accum64'      , None                , None            ) ,
GccMachineMode('TA'  , 'tetra signed accumulator'      , 'int'            , 'accum128'     , None                , None            ) ,
GccMachineMode('UHA' , 'half unsigned accumulator'     , 'unsigned'       , 'uaccum16'     , None                , None            ) ,
GccMachineMode('USA' , 'single unsigned accumulator'   , 'unsigned'       , 'uaccum32'     , None                , None            ) ,
GccMachineMode('UDA' , 'double unsigned accumulator'   , 'unsigned'       , 'uaccum64'     , None                , None            ) ,
GccMachineMode('UTA' , 'tetra unsigned accumulator'    , 'unsigned'       , 'uaccum128'    , None                , None            ) ,
GccMachineMode('QC'  , 'quarter complex binary float'  , '_Complex float' , 'cmplx_bin8'   , None                , None            ) ,
GccMachineMode('HC'  , 'half complex binary float'     , '_Complex float' , 'cmplx_bin16'  , None                , None            ) ,
GccMachineMode('SC'  , 'single complex binary float'   , '_Complex float' , 'cmplx_bin32'  , None                , None            ) ,
GccMachineMode('DC'  , 'double complex binary float'   , '_Complex float' , 'cmplx_bin64'  , None                , None            ) ,
GccMachineMode('XC'  , 'extended complex binary float' , '_Complex float' , 'cmplx_bin80'  , None                , None            ) ,
GccMachineMode('TC'  , 'tetra complex binary float'    , '_Complex float' , 'cmplx_bin128' , None                , None            ) ,
GccMachineMode('CQI' , 'quarter complex integer'       , '_Complex int'   , 'cmplx_int8'   , '_Complex unsigned' , 'cmplx_uint8'   ) ,
GccMachineMode('CHI' , 'half complex integer'          , '_Complex int'   , 'cmplx_int16'  , '_Complex unsigned' , 'cmplx_uint16'  ) ,
GccMachineMode('CSI' , 'single complex integer'        , '_Complex int'   , 'cmplx_int32'  , '_Complex unsigned' , 'cmplx_uint32'  ) ,
GccMachineMode('CDI' , 'double complex integer'        , '_Complex int'   , 'cmplx_int64'  , '_Complex unsigned' , 'cmplx_uint64'  ) ,
GccMachineMode('CTI' , 'tetra complex integer'         , '_Complex int'   , 'cmplx_int128' , '_Complex unsigned' , 'cmplx_uint128' ) ,
GccMachineMode('COI' , 'octa complex integer'          , '_Complex int'   , 'cmplx_int256' , '_Complex unsigned' , 'cmplx_uint256' ) ,
)

for mode in modes:
	if mode.exists():
		print(f"// YES {mode.description} ({mode.name})")
		print(f"#define HAVE_{mode.name}_MODE")
	else:
		print(f"// NO {mode.description} ({mode.name})")

for mode in modes:
	print()
	mode.print_c_decl_str()
