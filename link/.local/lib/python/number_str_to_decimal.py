# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

# pylint: disable=missing-module-docstring

import decimal
import re

__author__ = 'Steven Ward'
__license__ = 'OSL-3.0'

# https://en.wikipedia.org/wiki/Unit_prefix
# https://en.wikipedia.org/wiki/Metric_prefix
# https://en.wikipedia.org/wiki/Binary_prefix
UNIT_PREFIXES_TO_MAGNITUDE = {
    # SI
    'k': decimal.Decimal(10)**3,   # kilo
    'M': decimal.Decimal(10)**6,   # mega
    'G': decimal.Decimal(10)**9,   # giga
    'T': decimal.Decimal(10)**12,  # tera
    'P': decimal.Decimal(10)**15,  # peta
    'E': decimal.Decimal(10)**18,  # exa
    'Z': decimal.Decimal(10)**21,  # zetta
    'Y': decimal.Decimal(10)**24,  # yotta
    'R': decimal.Decimal(10)**27,  # ronna
    'Q': decimal.Decimal(10)**30,  # quetta

    # IEC
    'Ki': decimal.Decimal(2)**10,  # kibi
    'Mi': decimal.Decimal(2)**20,  # mebi
    'Gi': decimal.Decimal(2)**30,  # gibi
    'Ti': decimal.Decimal(2)**40,  # tebi
    'Pi': decimal.Decimal(2)**50,  # pebi
    'Ei': decimal.Decimal(2)**60,  # exbi
    'Zi': decimal.Decimal(2)**70,  # zebi
    'Yi': decimal.Decimal(2)**80,  # yobi
    'Ri': decimal.Decimal(2)**90,  # robi
    'Qi': decimal.Decimal(2)**100, # quebi
}

PATTERN_VALUE_PREFIX = re.compile(
        '(?P<value>.+?)(?P<prefix>' + '|'.join(UNIT_PREFIXES_TO_MAGNITUDE.keys()) + ')?$')

def number_str_to_decimal(s: str) -> decimal.Decimal:
    """
    Convert a numeric string to a decimal.Decimal, interpreting optional SI or binary unit prefixes.

    This function parses a string representing a number, which may optionally include
    a unit prefix that scales the value. Both SI (base-10) and binary (base-2) prefixes
    are supported. The prefix may be separated from the number by optional whitespace.
    Lowercase binary prefixes (e.g., "ki", "mi") are not supported.

    Supported SI prefixes (base 10): k, M, G, T, P, E, Z, Y, R, Q
    Supported binary prefixes (base 2): Ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi, Ri, Qi

    Examples
    --------
    >>> number_str_to_decimal("123.4")
    Decimal('123.4')
    >>> number_str_to_decimal("5k")
    Decimal('5000')
    >>> number_str_to_decimal("2.5 Mi")
    Decimal('2621440.0')
    >>> number_str_to_decimal("1.2 G")
    Decimal('1200000000.0')

    Parameters
    ----------
    s : str
        A string representing a numeric value, optionally ending in an SI or binary unit prefix.

    Returns
    -------
    decimal.Decimal
        The scaled numeric value as a Decimal.

    Raises
    ------
    ValueError
        If the numeric portion of the input cannot be converted to a Decimal,
        or the input string contains an unsupported unit prefix.

        Examples of invalid input:
            - "1.5 mi"   # lowercase binary prefix not supported
            - "7 XB"     # unsupported or malformed prefix
            - "abc"      # non-numeric input
            - "12.3.4k"  # malformed numeric part
    """
    # (docstring generated by ChatGPT)

    s = s.strip()

    match = PATTERN_VALUE_PREFIX.match(s)

    if match is None:
        raise ValueError(f'number string pattern not found: {s!r}')

    # value is required
    value = match.group('value')

    try:
        value = decimal.Decimal(value)
    except decimal.InvalidOperation as err:
        raise ValueError(f'could not convert string to Decimal: {value!r}') from err

    prefix = match.group('prefix')

    # prefix is optional
    if prefix is not None:
        try:
            value *= UNIT_PREFIXES_TO_MAGNITUDE[prefix]
        except KeyError as err:
            raise ValueError(f'could not convert string to unit prefix: {prefix!r}') from err

    return value
