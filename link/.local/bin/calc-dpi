#!/usr/bin/env python3
# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

# pylint: disable=invalid-name
# pylint: disable=missing-function-docstring
# pylint: disable=missing-module-docstring

__author__ = 'Steven Ward'
__version__ = '2023-11-29'
__license__ = 'OSL-3.0'

import math
import sys

def calcdpi(width_px: int, height_px: int, diagonal_in: float) -> float:
    return math.hypot(width_px, height_px) / diagonal_in

# pylint: disable=inconsistent-return-statements
# pylint: disable=too-many-branches
# pylint: disable=too-many-locals
# pylint: disable=too-many-statements
def main(argv = None):

    # pylint: disable=import-outside-toplevel
    import getopt
    import os.path
    #import signal

    if argv is None:
        argv = sys.argv

    program_name = os.path.basename(argv[0])

    # default values
    default_verbose = False
    default_width_px = 1920
    default_height_px = 1080
    default_scale_factor = 1.0
    default_min_dpi = 72
    default_max_dpi = 400

    # mutable values
    verbose = default_verbose
    width_px = default_width_px
    height_px = default_height_px
    diagonal_in = None
    scale_factor = default_scale_factor
    min_dpi = default_min_dpi
    max_dpi = default_max_dpi

    # pylint: disable=unused-variable
    #def signal_handler(signal_num, execution_frame):
    #    print()
    #    sys.exit(0)

    #signal.signal(signal.SIGINT, signal_handler) # Interactive attention signal. (Ctrl-C)
    #signal.signal(signal.SIGTERM, signal_handler) # Termination request. (kill default signal)

    def print_version():
        """Print the version information"""
        print(program_name, __version__)
        print("License:", __license__)
        print("Written by", __author__)

    def print_verbose(s):
        """Print the message if verbose mode is on"""
        if verbose:
            print('#', s)

    # pylint: disable=unused-variable
    def print_warning(s):
        """Print the warning message"""
        print('Warning:', s, file=sys.stderr)

    def print_error(s):
        """Print the error message"""
        print('Error:', s, file=sys.stderr)
        print(f"Try '{program_name} --help' for more information.", file=sys.stderr)

    def print_help():
        """Print the help message"""
        print(f"""Usage: {program_name} [OPTIONS] [RESOLUTION] DIAGONAL_INCHES
Calculate the DPI from the given display dimentions.

RESOLUTION is the resolution (in pixels) of the display.
The format of RESOLUTION is "<WIDTH>x<HEIGHT>".
WIDTH and HEIGHT must be positive integers.
(default: {default_width_px}x{default_height_px})

DIAGONAL_INCHES is the diagonal size (in inches) of the display.
It must be a positive real number.
If absent, you will be prompted to enter a value for it.

OPTIONS

-V, --version
    Print the version information, then exit.

-h, --help
    Print this message, then exit.

-v, --verbose
    Print diagnostics.

--width WIDTH_PX
    Specify the width (in pixels) of the display.
    It must be a positive integer.
    (default: {default_width_px})

--height HEIGHT_PX
    Specify the height (in pixels) of the display.
    It must be a positive integer.
    (default: {default_height_px})

-s, --scale SCALE_FACTOR
    Specify the scale factor to apply to the DPI.
    It must be a positive real number.
    (default: {default_scale_factor})

--min MIN_DPI
    Specify the minimum DPI.
    It must be a positive integer not greater than the maximum DPI.
    (default: {default_min_dpi})

--max MAX_DPI
    Specify the maximum DPI.
    It must be a positive integer not less than the minimum DPI.
    (default: {default_max_dpi})
""")

    short_options = 'Vhvs:'
    long_options = ['version', 'help', 'verbose',
        'width=', 'height=',
        'scale=', 'min=', 'max=',
        ]

    try:
        (options, remaining_args) = getopt.getopt(argv[1:], short_options, long_options)
    except getopt.GetoptError as err:
        print_error(err)
        return 1

    for (option, value) in options:
        # pylint: disable=no-else-return
        if option in ['-V', '--version']:
            print_version()
            return 0
        elif option in ['-h', '--help']:
            print_help()
            return 0
        elif option in ['-v', '--verbose']:
            verbose = True
        elif option in ['--width']:
            width_px = int(value)
        elif option in ['--height']:
            height_px = int(value)
        elif option in ['-s', '--scale']:
            scale_factor = float(value)
        elif option in ['--min']:
            min_dpi = int(value)
        elif option in ['--max']:
            max_dpi = int(value)
        else:
            print_error(f"Unhandled option: {option}")
            return 1

    if not remaining_args: # empty
        diagonal_in = input('Enter the diagonal size (in inches) of the display: ')
    else:
        for s in remaining_args:
            if 'x' in s: # resolution given
                (w, h) = s.split('x')
                width_px = int(w)
                height_px = int(h)
            else: # diagonal given
                diagonal_in = s

    diagonal_in = float(diagonal_in)

    print_verbose(f'{width_px=}')
    print_verbose(f'{height_px=}')
    print_verbose(f'{diagonal_in=}')
    print_verbose(f'{scale_factor=}')
    print_verbose(f'{min_dpi=}')
    print_verbose(f'{max_dpi=}')

    assert width_px > 0, f'{width_px=} must be > 0'
    assert height_px > 0, f'{height_px=} must be > 0'
    assert diagonal_in > 0, f'{diagonal_in=} must be > 0'
    assert scale_factor > 0, f'{scale_factor=} must be > 0'
    assert min_dpi > 0, f'{min_dpi=} must be > 0'
    assert max_dpi > 0, f'{max_dpi=} must be > 0'
    assert min_dpi <= max_dpi, f'{min_dpi=} must be <= {max_dpi=}'

    dpi = calcdpi(width_px, height_px, diagonal_in)
    print_verbose(f'{dpi=}')

    dpi *= scale_factor
    print_verbose(f'{dpi=}')

    # round() does round-half-even
    # Round-half-up is preferred, but this adequate
    dpi = round(dpi)
    #dpi = math.ceil(dpi)
    print_verbose(f'{dpi=}')

    if dpi < min_dpi:
        dpi = min_dpi
    elif dpi > max_dpi:
        dpi = max_dpi

    print(dpi)

if __name__ == '__main__':
    sys.exit(main())
