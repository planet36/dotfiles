#!/usr/bin/env python3
# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

# pylint: disable=invalid-name

'''
Inspired by <https://github.com/theryangeary/choose>.
'''

__author__ = 'Steven Ward'
__license__ = 'OSL-3.0'
__version__ = '2025-10-02'

import os
import re
import sys

# https://docs.python.org/3/library/functions.html#slice
# https://docs.python.org/3/reference/expressions.html#slicings
# https://docs.python.org/3/tutorial/introduction.html#strings
# pylint: disable=too-few-public-methods
class Choice:
    '''A Choice is either an index or a slice.
Indexes are 0-based, just like in Python.
Slices have the same syntax as in Python.'''

    def __init__(self, s: str):
        '''Convert s to a Choice.'''
        t = tuple(None if not i else int(i) for i in s.split(':', maxsplit=2))
        if len(t) == 1:
            self.is_index = True
            self.value = t[0]
        else:
            self.is_index = False
            self.value = slice(*t)


def choose(choices: tuple[Choice, ...], in_fields: list[str]) -> list[str]:
    '''Choose elements from in_fields according to the choices.'''

    out_fields = []

    for choice in choices:
        if choice.is_index:
            try:
                out_fields.append(in_fields[choice.value])
            except IndexError:
                pass
        else:
            out_fields.extend(in_fields[choice.value])

    return out_fields


# pylint: disable=missing-function-docstring
def main(argv = None):

    if argv is None:
        argv = sys.argv

    in_delim = re.compile(r' +|\t')
    out_delim = '\t'

    choices = tuple(Choice(arg) for arg in argv[1:])

    # Choose fields from each line from stdin.
    for line in sys.stdin:

        line = line.rstrip(os.linesep)

        in_fields = in_delim.split(line)

        out_fields = choose(choices, in_fields)

        print(out_delim.join(out_fields))

    return 0


if __name__ == '__main__':
    sys.exit(main())
