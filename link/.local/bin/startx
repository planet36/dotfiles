#!/usr/bin/bash

# copied from /usr/bin/startx

#
# This is just a sample implementation of a slightly less primitive
# interface than xinit. It looks for user .xinitrc and .xserverrc
# files, then system xinitrc and xserverrc files, else lets xinit choose
# its default. The system xinitrc should probably do things like check
# for .Xresources files and merge them in, start up a window manager,
# and pop a clock and several xterms.
#
# Site administrators are STRONGLY urged to write nicer versions.
#

: "${XINITRC:=$HOME/.xinitrc}"

unset SESSION_MANAGER
userclientrc="$XINITRC"
sysclientrc=/etc/X11/xinit/xinitrc

userserverrc=$HOME/.xserverrc
sysserverrc=/etc/X11/xinit/xserverrc
defaultclient=xterm
defaultserver=/usr/bin/X
defaultclientargs=""
defaultserverargs=""
defaultdisplay=""
clientargs=""
serverargs=""
vtarg=""
enable_xauth=1


# Automatically determine an unused $DISPLAY
d=0
while true ; do
    [[ -e "/tmp/.X$d-lock" ]] || [[ -S "/tmp/.X11-unix/X$d" ]] || break
    ((d++))
done
defaultdisplay=":$d"
unset d

whoseargs="client"
while [[ "$1" != "" ]]; do
    case "$1" in
    # '' required to prevent cpp from treating "/*" as a C comment.
    /''*|\./''*)
 if [[ "$whoseargs" == "client" ]]; then
     if [[ "$client" == "" ]] && [[ "$clientargs" == "" ]]; then
  client="$1"
     else
  clientargs="$clientargs $1"
     fi
 else
     if [[ "$server" == "" ]] && [[ "$serverargs" == "" ]]; then
  server="$1"
     else
  serverargs+=" $1"
     fi
 fi
 ;;
    --)
 whoseargs="server"
 ;;
    *)
 if [[ "$whoseargs" == "client" ]]; then
     clientargs="$clientargs $1"
 else
     # display must be the FIRST server argument
     if [[ "$serverargs" == "" ]] && \
   expr "$1" : ':[0-9][0-9]*$' &> /dev/null; then
  display="$1"
     else
  serverargs+=" $1"
     fi
 fi
 ;;
    esac
    shift
done

# process client arguments
if [[ "$client" == "" ]]; then
    client="$defaultclient"

    # For compatibility reasons, only use startxrc if there were no client command line arguments
    if [[ "$clientargs" == "" ]]; then
        if [[ -f "$userclientrc" ]]; then
            client="$userclientrc"
        elif [[ -f "$sysclientrc" ]]; then
            client="$sysclientrc"
        fi
    fi
fi

# if no client arguments, use defaults
if [[ "$clientargs" == "" ]]; then
    clientargs="$defaultclientargs"
fi

# process server arguments
if [[ "$server" == "" ]]; then
    server="$defaultserver"


    # When starting the defaultserver start X on the current tty to avoid
    # the startx session being seen as inactive:
    # "https://bugzilla.redhat.com/show_bug.cgi?id=806491"
    tty="$(tty)"
    if expr "$tty" : '/dev/tty[0-9][0-9]*$' > /dev/null; then
        tty_num="$(echo "$tty" | grep -oE '[0-9]+$')"
        vtarg="vt$tty_num -keeptty"
    fi


    # For compatibility reasons, only use xserverrc if there were no server command line arguments
    if [[ "$serverargs" == "" ]] && [[ "$display" == "" ]]; then
 if [[ -f "$userserverrc" ]]; then
     server="$userserverrc"
 elif [[ -f "$sysserverrc" ]]; then
     server="$sysserverrc"
 fi
    fi
fi

# if no server arguments, use defaults
if [[ "$serverargs" == "" ]]; then
    serverargs="$defaultserverargs"
fi

# if no vt is specified add vtarg (which may be empty)
have_vtarg="no"
for i in $serverargs; do
    if expr "$i" : 'vt[0-9][0-9]*$' > /dev/null; then
        have_vtarg="yes"
    fi
done
if [[ "$have_vtarg" == "no" ]]; then
    serverargs+=" $vtarg"
fi

# if no display, use default
if [[ "$display" == "" ]]; then
    display="$defaultdisplay"
fi

if [[ "$enable_xauth" == 1 ]] ; then
    if [[ "$XAUTHORITY" == "" ]]; then
        XAUTHORITY="$HOME/.Xauthority"
        export XAUTHORITY
    fi

    removelist=

    # set up default Xauth info for this machine
    hostname="$(uname -n)"

    authdisplay="${display:-:0}"

    mcookie="$(/usr/bin/mcookie)"







    if [[ "$mcookie" == "" ]]; then
        echo "Couldn't create cookie"
        exit 1
    fi
    dummy=0

    # create a file with auth information for the server. ':0' is a dummy.
    xserverauthfile="$(mktemp -p /tmp serverauth.XXXXXXXXXX)"
    trap 'rm -f "$xserverauthfile"' HUP INT QUIT ILL TRAP BUS TERM
    xauth -q -f "$xserverauthfile" << EOF
add :$dummy . $mcookie
EOF




    serverargs="${serverargs} -auth ${xserverauthfile}"


    # now add the same credentials to the client authority file
    # if '$displayname' already exists do not overwrite it as another
    # server may need it. Add them to the '$xserverauthfile' instead.
    for displayname in "$authdisplay" "$hostname/unix$authdisplay"; do
        authcookie="$(xauth list "$displayname" \
        | sed -n "s/.*$hostname\/unix${authdisplay}[[:space:]*].*[[:space:]*]//p")" 2>/dev/null;
        if [[ "${authcookie}" == "" ]] ; then
            xauth -q << EOF
add $displayname . $mcookie
EOF
        removelist="$displayname $removelist"
        else
            ((dummy++))
            xauth -q -f "$xserverauthfile" << EOF
add :$dummy . $authcookie
EOF
        fi
    done
fi




# shellcheck disable=SC2086
xinit "$client" $clientargs -- "$server" $display $serverargs

retval=$?

if [[ "$enable_xauth" == 1 ]] ; then
    if [[ "$removelist" != "" ]]; then
# shellcheck disable=SC2086
        xauth remove $removelist
    fi
    if [[ "$xserverauthfile" != "" ]]; then
        rm -f "$xserverauthfile"
    fi
fi





if command -v deallocvt &> /dev/null; then
    deallocvt
fi






exit $retval
