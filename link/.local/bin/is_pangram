#!/usr/bin/env python3
# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

# pylint: disable=missing-module-docstring

__author__ = 'Steven Ward'
__license__ = 'OSL-3.0'
__version__ = '2024-12-30'

import argparse
import os
import string
import sys


alphabet_set = frozenset(string.ascii_lowercase)


def is_pangram(s: str) -> bool:
    '''Determine if the string is a pangram.'''
    return alphabet_set.issubset(s.lower())


def pangram_missing(s: str) -> type(alphabet_set):
    '''Return the letters missing from the string needed to make a pangram.'''
    return alphabet_set.difference(s.lower())


# pylint: disable=missing-function-docstring
def main():

    description_lines = (
            'Read from stdin and determine if each line is a pangram.',
            'If a line is not a pangram, the missing letters are printed in the last field.'
            )

    version_lines = (f'%(prog)s {__version__}',
                    f'License: {__license__}',
                    f'Written by {__author__}')

    parser = argparse.ArgumentParser(
            description='\n'.join(description_lines),
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-V', '--version', action='version', version='\n'.join(version_lines))

    parser.parse_args()

    for line in sys.stdin:
        line = line.rstrip(os.linesep)

        if not line: # empty
            continue

        result = is_pangram(line)

        output = [str(result), ascii(line)]

        if not result:
            missing_letters = ''.join(sorted(pangram_missing(line)))
            output.append(missing_letters)

        print('\t'.join(output))


if __name__ == '__main__':
    main()
