#!/usr/bin/env python3
# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

# pylint: disable=fixme
# pylint: disable=invalid-name
# pylint: disable=missing-function-docstring
# pylint: disable=missing-module-docstring

# All circular angles are in degrees.

__author__ = 'Steven Ward'
__license__ = 'OSL-3.0'
__version__ = '2024-01-15'

import sys

# https://geopy.readthedocs.io/en/stable/#module-geopy.distance
import geopy.distance
import geopy.point

# pylint: disable=too-many-locals
def main(argv = None):

    # pylint: disable=import-outside-toplevel
    import getopt
    import os.path
    import signal

    if argv is None:
        argv = sys.argv

    program_name = os.path.basename(argv[0])

    # possible values
    possible_dist_funcs = {
            'geodesic': geopy.distance.geodesic,
            'great_circle': geopy.distance.great_circle,
            }

    # default values
    default_verbose = False
    default_method = 'geodesic'

    # mutable values
    verbose = default_verbose
    method = default_method

    # pylint: disable=unused-argument
    def signal_handler(signal_num, execution_frame):
        print()
        sys.exit(128 + signal_num)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    def print_version():
        """Print the version information"""
        print(program_name, __version__)
        print("License:", __license__)
        print("Written by", __author__)

    def print_verbose(s):
        """Print the message if verbose mode is on"""
        if verbose:
            print('#', s)

    # pylint: disable=unused-variable
    def print_warning(s):
        """Print the warning message"""
        print('Warning:', s, file=sys.stderr)

    def print_error(s):
        """Print the error message"""
        print('Error:', s, file=sys.stderr)
        print(f"Try '{program_name} --help' for more information.", file=sys.stderr)

    def print_help():
        """Print the help message"""
        print(f"""Usage: {program_name} [OPTION]...

Calculate the distance (in meters) between geodetic coordinates (in decimal degrees).

Pairs of geodetic coordinates, separated by whitespace on the same line, are read from stdin.
The coordinates are in the following order:
LAT1 LON1 LAT2 LON2

OPTIONS

-V, --version
    Print the version information, then exit.

-h, --help
    Print this message, then exit.

-v, --verbose
    Print diagnostics.

-m, --method METHOD
    Specify the method for calculating distance.
    (valid: {', '.join(possible_dist_funcs.keys())})
    (default: {default_method})

EXAMPLES

cat <<EOT | geodist --method geodesic
40.056667 -78.905833 38.889722 -77.008889
40.056667 -78.905833 38.8977 -77.0365
38.889722 -77.008889 38.8977 -77.0365
EOT

cat <<EOT | geodist --method great_circle
40.056667 -78.905833 38.889722 -77.008889
40.056667 -78.905833 38.8977 -77.0365
38.889722 -77.008889 38.8977 -77.0365
EOT
""")

    short_options = 'Vhvm:'
    long_options = ['version', 'help', 'verbose',
        'method=',
        ]

    try:
        (options, remaining_args) = getopt.getopt(argv[1:], short_options, long_options)
    except getopt.GetoptError as err:
        print_error(err)
        return 1

    for (option, value) in options:
        # pylint: disable=no-else-return
        if option in ['-V', '--version']:
            print_version()
            return 0
        elif option in ['-h', '--help']:
            print_help()
            return 0
        elif option in ['-v', '--verbose']:
            verbose = True
        elif option in ['-m', '--method']:
            method = value
        else:
            print_error(f"Unhandled option: {option}")
            return 1

    print_verbose(f'{method=}')

    dist_func = possible_dist_funcs[method]

    for line in sys.stdin:
        (lat1_deg, lon1_deg, lat2_deg, lon2_deg) = map(float, line.strip(os.linesep).split()[0:4])
        p1 = geopy.Point(lat1_deg, lon1_deg)
        p2 = geopy.Point(lat2_deg, lon2_deg)

        print_verbose(f'{p1=} {p2=}')

        distance = dist_func(p1, p2).meters
        print(f'{distance:.1f}')

if __name__ == '__main__':
    sys.exit(main())
