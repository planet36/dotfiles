#!/usr/bin/env python3
# SPDX-FileCopyrightText: Steven Ward
# SPDX-License-Identifier: OSL-3.0

# pylint: disable=line-too-long
# pylint: disable=missing-function-docstring
# pylint: disable=missing-module-docstring
# pylint: disable=no-else-return

# All circular angles are in degrees.

import math
import sys

from ellipsoid import WGS84

__version__ = '2022-08-03'


# https://mathworld.wolfram.com/Haversine.html
# https://en.wikipedia.org/wiki/Haversine_formula
def hav_rad(a_rad: float) -> float:
	'''Return the haversine of the given angle (radians).'''
	return math.sin(a_rad/2)**2


def normalize_angle_deg_signed(a_deg: float) -> float:
	return math.remainder(a_deg, 360)


def normalize_latitude_deg(lat_deg: float) -> float:
	lat_deg = normalize_angle_deg_signed(lat_deg)
	if lat_deg < -90:
		lat_deg = -180 - lat_deg
	elif lat_deg > 90:
		lat_deg = 180 - lat_deg
	return lat_deg


def normalize_longitude_deg(lon_deg: float) -> float:
	lon_deg = normalize_angle_deg_signed(lon_deg)
	return lon_deg


def normalize_geodetic_deg(lat_deg: float, lon_deg: float) -> tuple:
	lat_deg = normalize_angle_deg_signed(lat_deg)

	if lat_deg < -90:
		lat_deg = -180 - lat_deg
		lon_deg += 180
	elif lat_deg > 90:
		lat_deg = 180 - lat_deg
		lon_deg += 180

	lon_deg = normalize_longitude_deg(lon_deg)

	return (lat_deg, lon_deg)


def angle_deg_diff(a1_deg: float, a2_deg: float) -> float:
	return normalize_angle_deg_signed(a2_deg - a1_deg)


# TODO: maybe allow user to specify radius
# https://en.wikipedia.org/wiki/Earth_radius

# https://en.wikipedia.org/wiki/Haversine_formula
# http://www.movable-type.co.uk/scripts/latlong.html
def haversine_deg_dist(lat1_deg: float, lon1_deg: float, lat2_deg: float, lon2_deg: float) -> float:
	# pylint: disable=redefined-outer-name
	'''Calculate the haversine distance (in meters) between 2 geodetic coordinates (in degrees).'''

	sin_lat1 = math.sin(math.radians(lat1_deg))
	cos_lat1 = math.cos(math.radians(lat1_deg))

	sin_lat2 = math.sin(math.radians(lat2_deg))
	cos_lat2 = math.cos(math.radians(lat2_deg))

	R1 = WGS84.get_R(sin_lat1)
	R2 = WGS84.get_R(sin_lat2)
	R = (R1+R2)/2

	lat_diff_rad = math.radians(angle_deg_diff(lat1_deg, lat2_deg))
	lon_diff_rad = math.radians(angle_deg_diff(lon1_deg, lon2_deg))

	# a is the square of half the chord length between the points
	a = hav_rad(lat_diff_rad) + cos_lat1 * cos_lat2 * hav_rad(lon_diff_rad)

	# c is the angular distance in radians
	c = 2 * math.asin(math.sqrt(a))

	return R * c


# https://en.wikipedia.org/wiki/Euclidean_distance
def euclidian_deg_dist(lat1_deg: float, lon1_deg: float, lat2_deg: float, lon2_deg: float) -> float:
	# pylint: disable=redefined-outer-name
	'''Calculate the Euclidian distance (in meters) between 2 geodetic coordinates (in degrees).'''
	(x1, y1, z1) = WGS84.geodetic_to_ecef(lat1_deg, lon1_deg, 0)
	(x2, y2, z2) = WGS84.geodetic_to_ecef(lat2_deg, lon2_deg, 0)
	return math.dist((x1, y1, z1), (x2, y2, z2))


# pylint: disable=R0914
def main(argv = None):

	# pylint: disable=C0415
	import getopt
	import os.path
	import signal

	if argv is None:
		argv = sys.argv

	program_name = os.path.basename(argv[0])

	program_authors = ['Steven Ward']

	# possible values
	possible_dist_funcs = {
			'euclidian': euclidian_deg_dist,
			'haversine': haversine_deg_dist,
			}

	# default values
	default_verbose = False
	default_method = 'haversine'

	# mutable values
	verbose = default_verbose
	method = default_method

	# pylint: disable=W0613
	def signal_handler(signal_num, execution_frame):
		print()
		sys.exit(0)

	signal.signal(signal.SIGINT, signal_handler) # Interactive attention signal. (Ctrl-C)
	signal.signal(signal.SIGTERM, signal_handler) # Termination request. (kill default signal)

	def print_version():
		"""Print the version information"""
		print(program_name, __version__)
		print('Written by', ', '.join(program_authors))

	def print_verbose(s):
		"""Print the message if verbose mode is on"""
		if verbose:
			print('#', s)

	# pylint: disable=unused-variable
	def print_warning(s):
		"""Print the warning message"""
		print('Warning:', s, file=sys.stderr)

	def print_error(s):
		"""Print the error message"""
		print('Error:', s, file=sys.stderr)
		print(f"Try '{program_name} --help' for more information.", file=sys.stderr)

	def print_help():
		"""Print the help message"""
		print(f"""Usage: {program_name} [OPTIONS]

Calculate the distance (in meters) between geodetic coordinates (in decimal degrees).

Pairs of geodetic coordinates, separated by whitespace on the same line, are read from stdin.
The coordinates are in the following order:
LAT1 LON1 LAT2 LON2

OPTIONS

-V, --version
    Print the version information, then exit.

-h, --help
    Print this message, then exit.

-v, --verbose
    Print diagnostics.

-m, --method METHOD
    Specify the method for calculating distance.
    (valid: {', '.join(possible_dist_funcs.keys())})
    (default: {default_method})


EXAMPLES

cat <<EOT | geodist --method haversine
40.056667 -78.905833 38.889722 -77.008889
40.056667 -78.905833 38.8977 -77.0365
38.889722 -77.008889 38.8977 -77.0365
EOT

cat <<EOT | geodist --method euclidian
40.056667 -78.905833 38.889722 -77.008889
40.056667 -78.905833 38.8977 -77.0365
38.889722 -77.008889 38.8977 -77.0365
EOT

""")

	short_options = 'Vhvm:'
	long_options = ['version', 'help', 'verbose',
		'method=',
		]

	try:
		(options, remaining_args) = getopt.getopt(argv[1:], short_options, long_options)
	except getopt.GetoptError as err:
		print_error(err)
		return 1

	for (option, value) in options:
		# pylint: disable=R1705
		if option in ['-V', '--version']:
			print_version()
			return 0
		elif option in ['-h', '--help']:
			print_help()
			return 0
		elif option in ['-v', '--verbose']:
			verbose = True
		elif option in ['-m', '--method']:
			method = value
		else:
			print_error(f"Unhandled option: {option}")
			return 1

	print_verbose(f'{method=}')

	dist_func = possible_dist_funcs[method]

	for line in sys.stdin:
		(lat1_deg, lon1_deg, lat2_deg, lon2_deg) = map(float, line.strip(os.linesep).split()[0:4])
		(lat1_deg, lon1_deg) = normalize_geodetic_deg(lat1_deg, lon1_deg)
		(lat2_deg, lon2_deg) = normalize_geodetic_deg(lat2_deg, lon2_deg)

		print_verbose(f'{lat1_deg=} {lon1_deg=}')
		print_verbose(f'{lat2_deg=} {lon2_deg=}')

		distance = dist_func(lat1_deg, lon1_deg, lat2_deg, lon2_deg)
		print(f'{distance:.1f}')

if __name__ == '__main__':
	sys.exit(main())
