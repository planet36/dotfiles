// SPDX-FileCopyrightText: Steven Ward
// SPDX-License-Identifier: OSL-3.0

/// ascii strings
/**
\file
\author Steven Ward
\sa https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01
\sa https://en.cppreference.com/w/cpp/string/byte
\sa https://docs.python.org/3/library/string.html
*/

// Generated by "generate-ascii.py" on 2022-11-07T16:59:18+00:00
// system information: Linux-6.0.7-arch1-1-x86_64-with-glibc2.36

#pragma once

#include <array>
#include <string_view>

inline constexpr std::string_view ascii_all              {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 128};
inline constexpr std::string_view ascii_uppercase        {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", 26};
inline constexpr std::string_view ascii_lowercase        {"abcdefghijklmnopqrstuvwxyz", 26};
inline constexpr std::string_view ascii_alphabetical     {"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 52};
inline constexpr std::string_view ascii_decimal          {"0123456789", 10};
inline constexpr std::string_view ascii_alphanumeric     {"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 62};
inline constexpr std::string_view ascii_word             {"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", 63};
inline constexpr std::string_view ascii_hexadecimal      {"0123456789ABCDEFabcdef", 22};
inline constexpr std::string_view ascii_octal            {"01234567", 8};
inline constexpr std::string_view ascii_binary           {"01", 2};
inline constexpr std::string_view ascii_whitespace       {"\t\n\v\f\r ", 6};
inline constexpr std::string_view ascii_blank            {"\t ", 2};
inline constexpr std::string_view ascii_visible          {"!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 94};
inline constexpr std::string_view ascii_printable        {" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 95};
inline constexpr std::string_view ascii_control          {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x7F", 33};
inline constexpr std::string_view ascii_punctuation      {"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~", 32};
inline constexpr std::string_view ascii_non_uppercase    {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 102};
inline constexpr std::string_view ascii_non_lowercase    {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`{|}~\x7F", 102};
inline constexpr std::string_view ascii_non_alphabetical {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@[\\]^_`{|}~\x7F", 76};
inline constexpr std::string_view ascii_non_decimal      {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 118};
inline constexpr std::string_view ascii_non_alphanumeric {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x7F", 66};
inline constexpr std::string_view ascii_non_word         {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@[\\]^`{|}~\x7F", 65};
inline constexpr std::string_view ascii_non_hexadecimal  {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~\x7F", 106};
inline constexpr std::string_view ascii_non_octal        {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./89:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 120};
inline constexpr std::string_view ascii_non_binary       {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 126};
inline constexpr std::string_view ascii_non_whitespace   {"\x00\x01\x02\x03\x04\x05\x06\a\b\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 122};
inline constexpr std::string_view ascii_non_blank        {"\x00\x01\x02\x03\x04\x05\x06\a\b\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 126};
inline constexpr std::string_view ascii_non_visible      {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F \x7F", 34};
inline constexpr std::string_view ascii_non_printable    {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x7F", 33};
inline constexpr std::string_view ascii_non_control      {" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 95};
inline constexpr std::string_view ascii_non_punctuation  {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\x7F", 96};

/**
\sa https://en.cppreference.com/w/c/language/escape
\sa https://en.cppreference.com/w/cpp/language/escape
\sa https://eel.is/c++draft/lex.ccon#:simple-escape-sequence-char
*/
inline constexpr std::array<std::string_view, 128>
c_simple_esc_seq_hex{
	R"(\x00)",
	R"(\x01)",
	R"(\x02)",
	R"(\x03)",
	R"(\x04)",
	R"(\x05)",
	R"(\x06)",
	R"(\a)"  ,
	R"(\b)"  ,
	R"(\t)"  ,
	R"(\n)"  ,
	R"(\v)"  ,
	R"(\f)"  ,
	R"(\r)"  ,
	R"(\x0E)",
	R"(\x0F)",
	R"(\x10)",
	R"(\x11)",
	R"(\x12)",
	R"(\x13)",
	R"(\x14)",
	R"(\x15)",
	R"(\x16)",
	R"(\x17)",
	R"(\x18)",
	R"(\x19)",
	R"(\x1A)",
	R"(\x1B)",
	R"(\x1C)",
	R"(\x1D)",
	R"(\x1E)",
	R"(\x1F)",
	R"( )"   ,
	R"(!)"   ,
	R"(\")"  ,
	R"(#)"   ,
	R"($)"   ,
	R"(%)"   ,
	R"(&)"   ,
	R"(\')"  ,
	R"(()"   ,
	R"())"   ,
	R"(*)"   ,
	R"(+)"   ,
	R"(,)"   ,
	R"(-)"   ,
	R"(.)"   ,
	R"(/)"   ,
	R"(0)"   ,
	R"(1)"   ,
	R"(2)"   ,
	R"(3)"   ,
	R"(4)"   ,
	R"(5)"   ,
	R"(6)"   ,
	R"(7)"   ,
	R"(8)"   ,
	R"(9)"   ,
	R"(:)"   ,
	R"(;)"   ,
	R"(<)"   ,
	R"(=)"   ,
	R"(>)"   ,
	R"(?)"   ,
	R"(@)"   ,
	R"(A)"   ,
	R"(B)"   ,
	R"(C)"   ,
	R"(D)"   ,
	R"(E)"   ,
	R"(F)"   ,
	R"(G)"   ,
	R"(H)"   ,
	R"(I)"   ,
	R"(J)"   ,
	R"(K)"   ,
	R"(L)"   ,
	R"(M)"   ,
	R"(N)"   ,
	R"(O)"   ,
	R"(P)"   ,
	R"(Q)"   ,
	R"(R)"   ,
	R"(S)"   ,
	R"(T)"   ,
	R"(U)"   ,
	R"(V)"   ,
	R"(W)"   ,
	R"(X)"   ,
	R"(Y)"   ,
	R"(Z)"   ,
	R"([)"   ,
	R"(\\)"  ,
	R"(])"   ,
	R"(^)"   ,
	R"(_)"   ,
	R"(`)"   ,
	R"(a)"   ,
	R"(b)"   ,
	R"(c)"   ,
	R"(d)"   ,
	R"(e)"   ,
	R"(f)"   ,
	R"(g)"   ,
	R"(h)"   ,
	R"(i)"   ,
	R"(j)"   ,
	R"(k)"   ,
	R"(l)"   ,
	R"(m)"   ,
	R"(n)"   ,
	R"(o)"   ,
	R"(p)"   ,
	R"(q)"   ,
	R"(r)"   ,
	R"(s)"   ,
	R"(t)"   ,
	R"(u)"   ,
	R"(v)"   ,
	R"(w)"   ,
	R"(x)"   ,
	R"(y)"   ,
	R"(z)"   ,
	R"({)"   ,
	R"(|)"   ,
	R"(})"   ,
	R"(~)"   ,
	R"(\x7F)",
};
