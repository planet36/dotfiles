// SPDX-FileCopyrightText: Steven Ward
// SPDX-License-Identifier: OSL-3.0

/// ascii strings
/**
\file
\author Steven Ward
\sa https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01
\sa https://en.cppreference.com/w/cpp/string/byte
\sa https://docs.python.org/3/library/string.html
*/

// Generated by "generate-ascii.py" on 2022-11-07T16:25:17+00:00
// system information: Linux-6.0.7-arch1-1-x86_64-with-glibc2.36

#pragma once

#include <array>
#include <string_view>

inline constexpr std::string_view ascii_all              {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 128};
inline constexpr std::string_view ascii_uppercase        {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", 26};
inline constexpr std::string_view ascii_lowercase        {"abcdefghijklmnopqrstuvwxyz", 26};
inline constexpr std::string_view ascii_alphabetical     {"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 52};
inline constexpr std::string_view ascii_decimal          {"0123456789", 10};
inline constexpr std::string_view ascii_alphanumeric     {"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 62};
inline constexpr std::string_view ascii_word             {"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", 63};
inline constexpr std::string_view ascii_hexadecimal      {"0123456789ABCDEFabcdef", 22};
inline constexpr std::string_view ascii_octal            {"01234567", 8};
inline constexpr std::string_view ascii_binary           {"01", 2};
inline constexpr std::string_view ascii_whitespace       {"\t\n\v\f\r ", 6};
inline constexpr std::string_view ascii_blank            {"\t ", 2};
inline constexpr std::string_view ascii_visible          {"!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 94};
inline constexpr std::string_view ascii_printable        {" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 95};
inline constexpr std::string_view ascii_control          {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x7F", 33};
inline constexpr std::string_view ascii_punctuation      {"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~", 32};
inline constexpr std::string_view ascii_non_uppercase    {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 102};
inline constexpr std::string_view ascii_non_lowercase    {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`{|}~\x7F", 102};
inline constexpr std::string_view ascii_non_alphabetical {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./0123456789:;<=>?@[\\]^_`{|}~\x7F", 76};
inline constexpr std::string_view ascii_non_decimal      {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 118};
inline constexpr std::string_view ascii_non_alphanumeric {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x7F", 66};
inline constexpr std::string_view ascii_non_word         {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@[\\]^`{|}~\x7F", 65};
inline constexpr std::string_view ascii_non_hexadecimal  {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./:;<=>?@GHIJKLMNOPQRSTUVWXYZ[\\]^_`ghijklmnopqrstuvwxyz{|}~\x7F", 106};
inline constexpr std::string_view ascii_non_octal        {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./89:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 120};
inline constexpr std::string_view ascii_non_binary       {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&\'()*+,-./23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 126};
inline constexpr std::string_view ascii_non_whitespace   {"\x00\x01\x02\x03\x04\x05\x06\a\b\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 122};
inline constexpr std::string_view ascii_non_blank        {"\x00\x01\x02\x03\x04\x05\x06\a\b\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F", 126};
inline constexpr std::string_view ascii_non_visible      {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F \x7F", 34};
inline constexpr std::string_view ascii_non_printable    {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x7F", 33};
inline constexpr std::string_view ascii_non_control      {" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 95};
inline constexpr std::string_view ascii_non_punctuation  {"\x00\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\x7F", 96};

/**
\sa https://en.cppreference.com/w/c/language/escape
\sa https://en.cppreference.com/w/cpp/language/escape
\sa https://eel.is/c++draft/lex.ccon#:simple-escape-sequence-char
*/
inline constexpr std::array<std::string_view, 128>
ascii_cntrl_simple_esc_seq_hex{
	R"(\x00)", //   0
	R"(\x01)", //   1
	R"(\x02)", //   2
	R"(\x03)", //   3
	R"(\x04)", //   4
	R"(\x05)", //   5
	R"(\x06)", //   6
	R"(\a)"  , //   7
	R"(\b)"  , //   8
	R"(\t)"  , //   9
	R"(\n)"  , //  10
	R"(\v)"  , //  11
	R"(\f)"  , //  12
	R"(\r)"  , //  13
	R"(\x0E)", //  14
	R"(\x0F)", //  15
	R"(\x10)", //  16
	R"(\x11)", //  17
	R"(\x12)", //  18
	R"(\x13)", //  19
	R"(\x14)", //  20
	R"(\x15)", //  21
	R"(\x16)", //  22
	R"(\x17)", //  23
	R"(\x18)", //  24
	R"(\x19)", //  25
	R"(\x1A)", //  26
	R"(\x1B)", //  27
	R"(\x1C)", //  28
	R"(\x1D)", //  29
	R"(\x1E)", //  30
	R"(\x1F)", //  31
	""       , //  32 == " "
	""       , //  33 == "!"
	""       , //  34 == "\""
	""       , //  35 == "#"
	""       , //  36 == "$"
	""       , //  37 == "%"
	""       , //  38 == "&"
	""       , //  39 == "\'"
	""       , //  40 == "("
	""       , //  41 == ")"
	""       , //  42 == "*"
	""       , //  43 == "+"
	""       , //  44 == ","
	""       , //  45 == "-"
	""       , //  46 == "."
	""       , //  47 == "/"
	""       , //  48 == "0"
	""       , //  49 == "1"
	""       , //  50 == "2"
	""       , //  51 == "3"
	""       , //  52 == "4"
	""       , //  53 == "5"
	""       , //  54 == "6"
	""       , //  55 == "7"
	""       , //  56 == "8"
	""       , //  57 == "9"
	""       , //  58 == ":"
	""       , //  59 == ";"
	""       , //  60 == "<"
	""       , //  61 == "="
	""       , //  62 == ">"
	""       , //  63 == "?"
	""       , //  64 == "@"
	""       , //  65 == "A"
	""       , //  66 == "B"
	""       , //  67 == "C"
	""       , //  68 == "D"
	""       , //  69 == "E"
	""       , //  70 == "F"
	""       , //  71 == "G"
	""       , //  72 == "H"
	""       , //  73 == "I"
	""       , //  74 == "J"
	""       , //  75 == "K"
	""       , //  76 == "L"
	""       , //  77 == "M"
	""       , //  78 == "N"
	""       , //  79 == "O"
	""       , //  80 == "P"
	""       , //  81 == "Q"
	""       , //  82 == "R"
	""       , //  83 == "S"
	""       , //  84 == "T"
	""       , //  85 == "U"
	""       , //  86 == "V"
	""       , //  87 == "W"
	""       , //  88 == "X"
	""       , //  89 == "Y"
	""       , //  90 == "Z"
	""       , //  91 == "["
	""       , //  92 == "\\"
	""       , //  93 == "]"
	""       , //  94 == "^"
	""       , //  95 == "_"
	""       , //  96 == "`"
	""       , //  97 == "a"
	""       , //  98 == "b"
	""       , //  99 == "c"
	""       , // 100 == "d"
	""       , // 101 == "e"
	""       , // 102 == "f"
	""       , // 103 == "g"
	""       , // 104 == "h"
	""       , // 105 == "i"
	""       , // 106 == "j"
	""       , // 107 == "k"
	""       , // 108 == "l"
	""       , // 109 == "m"
	""       , // 110 == "n"
	""       , // 111 == "o"
	""       , // 112 == "p"
	""       , // 113 == "q"
	""       , // 114 == "r"
	""       , // 115 == "s"
	""       , // 116 == "t"
	""       , // 117 == "u"
	""       , // 118 == "v"
	""       , // 119 == "w"
	""       , // 120 == "x"
	""       , // 121 == "y"
	""       , // 122 == "z"
	""       , // 123 == "{"
	""       , // 124 == "|"
	""       , // 125 == "}"
	""       , // 126 == "~"
	R"(\x7F)", // 127
};
