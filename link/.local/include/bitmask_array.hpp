// SPDX-FileCopyrightText: Steven Ward
// SPDX-License-Identifier: OSL-3.0

/// a bitmask array library
/**
\file
\author Steven Ward

For the "one" bitmasks, one bit is set (1) and the rest are not set (0).
For the "zero" bitmasks, one bit is not set (0) and the rest are set (1).
For the "lowpass" bitmasks, the low-order bits are set (1) and the high-order bits are not set (0).
For the "highpass" bitmasks, the high-order bits are set (1) and the low-order bits are not set (0).

Example:
\verbatim
bitmask of 8 bits

 i  one       zero      lowpass   highpass
 0  00000001  11111110  00000000  11111111
 1  00000010  11111101  00000001  11111110
 2  00000100  11111011  00000011  11111100
 3  00001000  11110111  00000111  11111000
 4  00010000  11101111  00001111  11110000
 5  00100000  11011111  00011111  11100000
 6  01000000  10111111  00111111  11000000
 7  10000000  01111111  01111111  10000000
\endverbatim
*/

#pragma once

#include <array>
#include <cstdint>

constexpr std::array<uint8_t, 8> bitmask8_array_one{
    1U <<  0U,
    1U <<  1U,
    1U <<  2U,
    1U <<  3U,
    1U <<  4U,
    1U <<  5U,
    1U <<  6U,
    1U <<  7U,
};

constexpr std::array<uint8_t, 8> bitmask8_array_zero{
    static_cast<uint8_t>(~bitmask8_array_one[ 0]),
    static_cast<uint8_t>(~bitmask8_array_one[ 1]),
    static_cast<uint8_t>(~bitmask8_array_one[ 2]),
    static_cast<uint8_t>(~bitmask8_array_one[ 3]),
    static_cast<uint8_t>(~bitmask8_array_one[ 4]),
    static_cast<uint8_t>(~bitmask8_array_one[ 5]),
    static_cast<uint8_t>(~bitmask8_array_one[ 6]),
    static_cast<uint8_t>(~bitmask8_array_one[ 7]),
};

constexpr std::array<uint8_t, 8> bitmask8_array_lowpass{
    static_cast<uint8_t>(bitmask8_array_one[ 0] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 1] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 2] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 3] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 4] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 5] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 6] - 1U),
    static_cast<uint8_t>(bitmask8_array_one[ 7] - 1U),
};

constexpr std::array<uint8_t, 8> bitmask8_array_highpass{
    static_cast<uint8_t>(bitmask8_array_zero[ 0] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 1] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 2] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 3] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 4] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 5] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 6] + 1U),
    static_cast<uint8_t>(bitmask8_array_zero[ 7] + 1U),
};

constexpr std::array<uint16_t, 16> bitmask16_array_one{
    1U <<  0U,
    1U <<  1U,
    1U <<  2U,
    1U <<  3U,
    1U <<  4U,
    1U <<  5U,
    1U <<  6U,
    1U <<  7U,
    1U <<  8U,
    1U <<  9U,
    1U << 10U,
    1U << 11U,
    1U << 12U,
    1U << 13U,
    1U << 14U,
    1U << 15U,
};

constexpr std::array<uint16_t, 16> bitmask16_array_zero{
    static_cast<uint16_t>(~bitmask16_array_one[ 0]),
    static_cast<uint16_t>(~bitmask16_array_one[ 1]),
    static_cast<uint16_t>(~bitmask16_array_one[ 2]),
    static_cast<uint16_t>(~bitmask16_array_one[ 3]),
    static_cast<uint16_t>(~bitmask16_array_one[ 4]),
    static_cast<uint16_t>(~bitmask16_array_one[ 5]),
    static_cast<uint16_t>(~bitmask16_array_one[ 6]),
    static_cast<uint16_t>(~bitmask16_array_one[ 7]),
    static_cast<uint16_t>(~bitmask16_array_one[ 8]),
    static_cast<uint16_t>(~bitmask16_array_one[ 9]),
    static_cast<uint16_t>(~bitmask16_array_one[10]),
    static_cast<uint16_t>(~bitmask16_array_one[11]),
    static_cast<uint16_t>(~bitmask16_array_one[12]),
    static_cast<uint16_t>(~bitmask16_array_one[13]),
    static_cast<uint16_t>(~bitmask16_array_one[14]),
    static_cast<uint16_t>(~bitmask16_array_one[15]),
};

constexpr std::array<uint16_t, 16> bitmask16_array_lowpass{
    static_cast<uint16_t>(bitmask16_array_one[ 0] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 1] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 2] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 3] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 4] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 5] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 6] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 7] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 8] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[ 9] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[10] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[11] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[12] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[13] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[14] - 1U),
    static_cast<uint16_t>(bitmask16_array_one[15] - 1U),
};

constexpr std::array<uint16_t, 16> bitmask16_array_highpass{
    static_cast<uint16_t>(bitmask16_array_zero[ 0] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 1] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 2] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 3] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 4] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 5] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 6] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 7] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 8] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[ 9] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[10] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[11] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[12] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[13] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[14] + 1U),
    static_cast<uint16_t>(bitmask16_array_zero[15] + 1U),
};

constexpr std::array<uint32_t, 32> bitmask32_array_one{
    1U <<  0U,
    1U <<  1U,
    1U <<  2U,
    1U <<  3U,
    1U <<  4U,
    1U <<  5U,
    1U <<  6U,
    1U <<  7U,
    1U <<  8U,
    1U <<  9U,
    1U << 10U,
    1U << 11U,
    1U << 12U,
    1U << 13U,
    1U << 14U,
    1U << 15U,
    1U << 16U,
    1U << 17U,
    1U << 18U,
    1U << 19U,
    1U << 20U,
    1U << 21U,
    1U << 22U,
    1U << 23U,
    1U << 24U,
    1U << 25U,
    1U << 26U,
    1U << 27U,
    1U << 28U,
    1U << 29U,
    1U << 30U,
    1U << 31U,
};

constexpr std::array<uint32_t, 32> bitmask32_array_zero{
    ~bitmask32_array_one[ 0],
    ~bitmask32_array_one[ 1],
    ~bitmask32_array_one[ 2],
    ~bitmask32_array_one[ 3],
    ~bitmask32_array_one[ 4],
    ~bitmask32_array_one[ 5],
    ~bitmask32_array_one[ 6],
    ~bitmask32_array_one[ 7],
    ~bitmask32_array_one[ 8],
    ~bitmask32_array_one[ 9],
    ~bitmask32_array_one[10],
    ~bitmask32_array_one[11],
    ~bitmask32_array_one[12],
    ~bitmask32_array_one[13],
    ~bitmask32_array_one[14],
    ~bitmask32_array_one[15],
    ~bitmask32_array_one[16],
    ~bitmask32_array_one[17],
    ~bitmask32_array_one[18],
    ~bitmask32_array_one[19],
    ~bitmask32_array_one[20],
    ~bitmask32_array_one[21],
    ~bitmask32_array_one[22],
    ~bitmask32_array_one[23],
    ~bitmask32_array_one[24],
    ~bitmask32_array_one[25],
    ~bitmask32_array_one[26],
    ~bitmask32_array_one[27],
    ~bitmask32_array_one[28],
    ~bitmask32_array_one[29],
    ~bitmask32_array_one[30],
    ~bitmask32_array_one[31],
};

constexpr std::array<uint32_t, 32> bitmask32_array_lowpass{
    bitmask32_array_one[ 0] - 1U,
    bitmask32_array_one[ 1] - 1U,
    bitmask32_array_one[ 2] - 1U,
    bitmask32_array_one[ 3] - 1U,
    bitmask32_array_one[ 4] - 1U,
    bitmask32_array_one[ 5] - 1U,
    bitmask32_array_one[ 6] - 1U,
    bitmask32_array_one[ 7] - 1U,
    bitmask32_array_one[ 8] - 1U,
    bitmask32_array_one[ 9] - 1U,
    bitmask32_array_one[10] - 1U,
    bitmask32_array_one[11] - 1U,
    bitmask32_array_one[12] - 1U,
    bitmask32_array_one[13] - 1U,
    bitmask32_array_one[14] - 1U,
    bitmask32_array_one[15] - 1U,
    bitmask32_array_one[16] - 1U,
    bitmask32_array_one[17] - 1U,
    bitmask32_array_one[18] - 1U,
    bitmask32_array_one[19] - 1U,
    bitmask32_array_one[20] - 1U,
    bitmask32_array_one[21] - 1U,
    bitmask32_array_one[22] - 1U,
    bitmask32_array_one[23] - 1U,
    bitmask32_array_one[24] - 1U,
    bitmask32_array_one[25] - 1U,
    bitmask32_array_one[26] - 1U,
    bitmask32_array_one[27] - 1U,
    bitmask32_array_one[28] - 1U,
    bitmask32_array_one[29] - 1U,
    bitmask32_array_one[30] - 1U,
    bitmask32_array_one[31] - 1U,
};

constexpr std::array<uint32_t, 32> bitmask32_array_highpass{
    bitmask32_array_zero[ 0] + 1U,
    bitmask32_array_zero[ 1] + 1U,
    bitmask32_array_zero[ 2] + 1U,
    bitmask32_array_zero[ 3] + 1U,
    bitmask32_array_zero[ 4] + 1U,
    bitmask32_array_zero[ 5] + 1U,
    bitmask32_array_zero[ 6] + 1U,
    bitmask32_array_zero[ 7] + 1U,
    bitmask32_array_zero[ 8] + 1U,
    bitmask32_array_zero[ 9] + 1U,
    bitmask32_array_zero[10] + 1U,
    bitmask32_array_zero[11] + 1U,
    bitmask32_array_zero[12] + 1U,
    bitmask32_array_zero[13] + 1U,
    bitmask32_array_zero[14] + 1U,
    bitmask32_array_zero[15] + 1U,
    bitmask32_array_zero[16] + 1U,
    bitmask32_array_zero[17] + 1U,
    bitmask32_array_zero[18] + 1U,
    bitmask32_array_zero[19] + 1U,
    bitmask32_array_zero[20] + 1U,
    bitmask32_array_zero[21] + 1U,
    bitmask32_array_zero[22] + 1U,
    bitmask32_array_zero[23] + 1U,
    bitmask32_array_zero[24] + 1U,
    bitmask32_array_zero[25] + 1U,
    bitmask32_array_zero[26] + 1U,
    bitmask32_array_zero[27] + 1U,
    bitmask32_array_zero[28] + 1U,
    bitmask32_array_zero[29] + 1U,
    bitmask32_array_zero[30] + 1U,
    bitmask32_array_zero[31] + 1U,
};

constexpr std::array<uint64_t, 64> bitmask64_array_one{
    1ULL <<  0U,
    1ULL <<  1U,
    1ULL <<  2U,
    1ULL <<  3U,
    1ULL <<  4U,
    1ULL <<  5U,
    1ULL <<  6U,
    1ULL <<  7U,
    1ULL <<  8U,
    1ULL <<  9U,
    1ULL << 10U,
    1ULL << 11U,
    1ULL << 12U,
    1ULL << 13U,
    1ULL << 14U,
    1ULL << 15U,
    1ULL << 16U,
    1ULL << 17U,
    1ULL << 18U,
    1ULL << 19U,
    1ULL << 20U,
    1ULL << 21U,
    1ULL << 22U,
    1ULL << 23U,
    1ULL << 24U,
    1ULL << 25U,
    1ULL << 26U,
    1ULL << 27U,
    1ULL << 28U,
    1ULL << 29U,
    1ULL << 30U,
    1ULL << 31U,
    1ULL << 32U,
    1ULL << 33U,
    1ULL << 34U,
    1ULL << 35U,
    1ULL << 36U,
    1ULL << 37U,
    1ULL << 38U,
    1ULL << 39U,
    1ULL << 40U,
    1ULL << 41U,
    1ULL << 42U,
    1ULL << 43U,
    1ULL << 44U,
    1ULL << 45U,
    1ULL << 46U,
    1ULL << 47U,
    1ULL << 48U,
    1ULL << 49U,
    1ULL << 50U,
    1ULL << 51U,
    1ULL << 52U,
    1ULL << 53U,
    1ULL << 54U,
    1ULL << 55U,
    1ULL << 56U,
    1ULL << 57U,
    1ULL << 58U,
    1ULL << 59U,
    1ULL << 60U,
    1ULL << 61U,
    1ULL << 62U,
    1ULL << 63U,
};

constexpr std::array<uint64_t, 64> bitmask64_array_zero{
    ~bitmask64_array_one[ 0],
    ~bitmask64_array_one[ 1],
    ~bitmask64_array_one[ 2],
    ~bitmask64_array_one[ 3],
    ~bitmask64_array_one[ 4],
    ~bitmask64_array_one[ 5],
    ~bitmask64_array_one[ 6],
    ~bitmask64_array_one[ 7],
    ~bitmask64_array_one[ 8],
    ~bitmask64_array_one[ 9],
    ~bitmask64_array_one[10],
    ~bitmask64_array_one[11],
    ~bitmask64_array_one[12],
    ~bitmask64_array_one[13],
    ~bitmask64_array_one[14],
    ~bitmask64_array_one[15],
    ~bitmask64_array_one[16],
    ~bitmask64_array_one[17],
    ~bitmask64_array_one[18],
    ~bitmask64_array_one[19],
    ~bitmask64_array_one[20],
    ~bitmask64_array_one[21],
    ~bitmask64_array_one[22],
    ~bitmask64_array_one[23],
    ~bitmask64_array_one[24],
    ~bitmask64_array_one[25],
    ~bitmask64_array_one[26],
    ~bitmask64_array_one[27],
    ~bitmask64_array_one[28],
    ~bitmask64_array_one[29],
    ~bitmask64_array_one[30],
    ~bitmask64_array_one[31],
    ~bitmask64_array_one[32],
    ~bitmask64_array_one[33],
    ~bitmask64_array_one[34],
    ~bitmask64_array_one[35],
    ~bitmask64_array_one[36],
    ~bitmask64_array_one[37],
    ~bitmask64_array_one[38],
    ~bitmask64_array_one[39],
    ~bitmask64_array_one[40],
    ~bitmask64_array_one[41],
    ~bitmask64_array_one[42],
    ~bitmask64_array_one[43],
    ~bitmask64_array_one[44],
    ~bitmask64_array_one[45],
    ~bitmask64_array_one[46],
    ~bitmask64_array_one[47],
    ~bitmask64_array_one[48],
    ~bitmask64_array_one[49],
    ~bitmask64_array_one[50],
    ~bitmask64_array_one[51],
    ~bitmask64_array_one[52],
    ~bitmask64_array_one[53],
    ~bitmask64_array_one[54],
    ~bitmask64_array_one[55],
    ~bitmask64_array_one[56],
    ~bitmask64_array_one[57],
    ~bitmask64_array_one[58],
    ~bitmask64_array_one[59],
    ~bitmask64_array_one[60],
    ~bitmask64_array_one[61],
    ~bitmask64_array_one[62],
    ~bitmask64_array_one[63],
};

constexpr std::array<uint64_t, 64> bitmask64_array_lowpass{
    bitmask64_array_one[ 0] - 1U,
    bitmask64_array_one[ 1] - 1U,
    bitmask64_array_one[ 2] - 1U,
    bitmask64_array_one[ 3] - 1U,
    bitmask64_array_one[ 4] - 1U,
    bitmask64_array_one[ 5] - 1U,
    bitmask64_array_one[ 6] - 1U,
    bitmask64_array_one[ 7] - 1U,
    bitmask64_array_one[ 8] - 1U,
    bitmask64_array_one[ 9] - 1U,
    bitmask64_array_one[10] - 1U,
    bitmask64_array_one[11] - 1U,
    bitmask64_array_one[12] - 1U,
    bitmask64_array_one[13] - 1U,
    bitmask64_array_one[14] - 1U,
    bitmask64_array_one[15] - 1U,
    bitmask64_array_one[16] - 1U,
    bitmask64_array_one[17] - 1U,
    bitmask64_array_one[18] - 1U,
    bitmask64_array_one[19] - 1U,
    bitmask64_array_one[20] - 1U,
    bitmask64_array_one[21] - 1U,
    bitmask64_array_one[22] - 1U,
    bitmask64_array_one[23] - 1U,
    bitmask64_array_one[24] - 1U,
    bitmask64_array_one[25] - 1U,
    bitmask64_array_one[26] - 1U,
    bitmask64_array_one[27] - 1U,
    bitmask64_array_one[28] - 1U,
    bitmask64_array_one[29] - 1U,
    bitmask64_array_one[30] - 1U,
    bitmask64_array_one[31] - 1U,
    bitmask64_array_one[32] - 1U,
    bitmask64_array_one[33] - 1U,
    bitmask64_array_one[34] - 1U,
    bitmask64_array_one[35] - 1U,
    bitmask64_array_one[36] - 1U,
    bitmask64_array_one[37] - 1U,
    bitmask64_array_one[38] - 1U,
    bitmask64_array_one[39] - 1U,
    bitmask64_array_one[40] - 1U,
    bitmask64_array_one[41] - 1U,
    bitmask64_array_one[42] - 1U,
    bitmask64_array_one[43] - 1U,
    bitmask64_array_one[44] - 1U,
    bitmask64_array_one[45] - 1U,
    bitmask64_array_one[46] - 1U,
    bitmask64_array_one[47] - 1U,
    bitmask64_array_one[48] - 1U,
    bitmask64_array_one[49] - 1U,
    bitmask64_array_one[50] - 1U,
    bitmask64_array_one[51] - 1U,
    bitmask64_array_one[52] - 1U,
    bitmask64_array_one[53] - 1U,
    bitmask64_array_one[54] - 1U,
    bitmask64_array_one[55] - 1U,
    bitmask64_array_one[56] - 1U,
    bitmask64_array_one[57] - 1U,
    bitmask64_array_one[58] - 1U,
    bitmask64_array_one[59] - 1U,
    bitmask64_array_one[60] - 1U,
    bitmask64_array_one[61] - 1U,
    bitmask64_array_one[62] - 1U,
    bitmask64_array_one[63] - 1U,
};

constexpr std::array<uint64_t, 64> bitmask64_array_highpass{
    bitmask64_array_zero[ 0] + 1U,
    bitmask64_array_zero[ 1] + 1U,
    bitmask64_array_zero[ 2] + 1U,
    bitmask64_array_zero[ 3] + 1U,
    bitmask64_array_zero[ 4] + 1U,
    bitmask64_array_zero[ 5] + 1U,
    bitmask64_array_zero[ 6] + 1U,
    bitmask64_array_zero[ 7] + 1U,
    bitmask64_array_zero[ 8] + 1U,
    bitmask64_array_zero[ 9] + 1U,
    bitmask64_array_zero[10] + 1U,
    bitmask64_array_zero[11] + 1U,
    bitmask64_array_zero[12] + 1U,
    bitmask64_array_zero[13] + 1U,
    bitmask64_array_zero[14] + 1U,
    bitmask64_array_zero[15] + 1U,
    bitmask64_array_zero[16] + 1U,
    bitmask64_array_zero[17] + 1U,
    bitmask64_array_zero[18] + 1U,
    bitmask64_array_zero[19] + 1U,
    bitmask64_array_zero[20] + 1U,
    bitmask64_array_zero[21] + 1U,
    bitmask64_array_zero[22] + 1U,
    bitmask64_array_zero[23] + 1U,
    bitmask64_array_zero[24] + 1U,
    bitmask64_array_zero[25] + 1U,
    bitmask64_array_zero[26] + 1U,
    bitmask64_array_zero[27] + 1U,
    bitmask64_array_zero[28] + 1U,
    bitmask64_array_zero[29] + 1U,
    bitmask64_array_zero[30] + 1U,
    bitmask64_array_zero[31] + 1U,
    bitmask64_array_zero[32] + 1U,
    bitmask64_array_zero[33] + 1U,
    bitmask64_array_zero[34] + 1U,
    bitmask64_array_zero[35] + 1U,
    bitmask64_array_zero[36] + 1U,
    bitmask64_array_zero[37] + 1U,
    bitmask64_array_zero[38] + 1U,
    bitmask64_array_zero[39] + 1U,
    bitmask64_array_zero[40] + 1U,
    bitmask64_array_zero[41] + 1U,
    bitmask64_array_zero[42] + 1U,
    bitmask64_array_zero[43] + 1U,
    bitmask64_array_zero[44] + 1U,
    bitmask64_array_zero[45] + 1U,
    bitmask64_array_zero[46] + 1U,
    bitmask64_array_zero[47] + 1U,
    bitmask64_array_zero[48] + 1U,
    bitmask64_array_zero[49] + 1U,
    bitmask64_array_zero[50] + 1U,
    bitmask64_array_zero[51] + 1U,
    bitmask64_array_zero[52] + 1U,
    bitmask64_array_zero[53] + 1U,
    bitmask64_array_zero[54] + 1U,
    bitmask64_array_zero[55] + 1U,
    bitmask64_array_zero[56] + 1U,
    bitmask64_array_zero[57] + 1U,
    bitmask64_array_zero[58] + 1U,
    bitmask64_array_zero[59] + 1U,
    bitmask64_array_zero[60] + 1U,
    bitmask64_array_zero[61] + 1U,
    bitmask64_array_zero[62] + 1U,
    bitmask64_array_zero[63] + 1U,
};
